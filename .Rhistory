iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
setwd("E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 2/Assignment")
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 53203, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 44.0065, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -79.4504, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
library(leaflet)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 53203, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 44.0065, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -79.4504, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 53203, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.752192, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -76.698439, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 20)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 53203, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.7678, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.6134, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 20)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 53203, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.7678, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.6134, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 13782, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.4605, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.3645, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 13782, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
```{r echo=TRUE}
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 13782, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
# Chunk 1
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 13782, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
lat = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
lng = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
# Chunk 1
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna"),
pop = c(258703, 13782, 29054, 56936, 11317,
5327, 44711, 88226, 17955),
latitude = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256),
longitude = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
library(leaflet)
library(dplyr)
```{r, echo=TRUE, warning=FALSE}
library(leaflet)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna", "Clarence"),
pop = c(31918, 72455, 85660, 62383, 78424,
81432, 59265, 48662, 35352, 88003, 31560),
latitude = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256, 42.976667, 43.1),
longitude = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234, -79.016667))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
```
```{r, echo=TRUE, warning=FALSE}
library(leaflet)
md_cities <- data.frame(name = c("Buffalo", "Aurora", "Orchard Park", "Hamburg", "Elma",
"Marilla", "West Seneca", "Cheektowaga", "Lackawanna", "Clarence"),
pop = c(31918, 72455, 85660, 62383, 78424,
81432, 59265, 48662, 35352, 88003, 31560),
latitude = c(42.8864, 42.768056, 42.7676, 42.7159, 42.8510, 42.8401, 42.8359, 42.9026, 42.8256, 42.976667, 43.1),
longitude = c(-78.8784, -78.6125, -78.7439, -78.8295, -78.6402, -78.5550, -78.7539, -78.7446, -78.8234, -79.016667))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 10)
```
mean
colSums
show
lm
dgamma
predict
setwd("E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 3")
head(cars)
head(mtcars)
data(iris)
plot_ly(x= iris$Sepal.Width, y= iris$Sepal.Length, z = iris$Species,
type = "scatter3d", mode = "markers", color = iris$Species)
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(iris, y = ~Petal.Length, color = ~Species, type = "box")
terrain2 <- matrix(sort(rnorm(100*100)), nrow = 100, ncol = 100)
plot_ly(z = ~terrain2, type = "surface")
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state
head(state_pop)
head(state.x77)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frame
state_grad_rate <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_grad_rate$hover <- with(state_grad_rate, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_grad_rate$Pop, text = ~state_grad_rate$hover, locations = ~state_grad_rate$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_grad_rate$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
# Create data frame
state_grad_rate <- data.frame(State = state.abb, Grad_Rate = as.vector(state.x77[,1]))
# Create hover text
state_grad_rate$hover <- with(state_grad_rate, paste(State, '<br>', "HIgh School Graduation Rate:", Grad_Rate))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_grad_rate$Grad_Rate, text = ~state_grad_rate$hover, locations = ~state_grad_rate$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_grad_rate$Grad_Rate, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'HS Graduation Rate in 1975', geo = map_options)
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
head(state.x77)
# Create data frame
state_grad_rate <- data.frame(State = state.abb, Grad_Rate = as.vector(state.x77[,6]))
# Create hover text
state_grad_rate$hover <- with(state_grad_rate, paste(State, '<br>', "HIgh School Graduation Rate:", Grad_Rate))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_grad_rate$Grad_Rate, text = ~state_grad_rate$hover, locations = ~state_grad_rate$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_grad_rate$Grad_Rate, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'HS Graduation Rate in 1975', geo = map_options)
source('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 3/test.R')
source('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 3/test.R')
install.packages("HistData")
source('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 3/test.R')
source('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 3/test.R')
g <- g + facet_grid(. ~ variable)
library(swirlify)
install.packages("swirlify")
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project')
install.packages(rsconnect)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jtl6713',
token='6A62BA34C85E4C6BA78DFA0B6BED1522',
secret='GEERDrRML+10kzxUcdMvIQh1rCKFvYja9AKIrSVZ')
shiny::runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project')
library(shiny)
setwd("E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/ShinyGadget/ShinyGadgets")
observeEvent(input$done, {
stopApp()
})
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/Shiny2')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/Shiny2')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/Shiny2')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/Shiny2')
runApp('E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 1/Week1ShinyExample/Shiny2')
setwd("E:/Cloud/Dropbox/School/Coursera/Data Science/Developing Data Product/Week 4/DevelopingDataProducts-Final-Project")
runApp()
install.packages('rcharts')
runApp()
library(devtools)
devtools::install_github('ramnathv/rCharts')
runApp()
runApp()
install.packages(ggvis)
install.packages('ggvis')
runApp()
install.packages("mapproj")
runApp()
#'
aggregate_by_state <- function(dt, year_min, year_max, evtypes) {
replace_na <- function(x) ifelse(is.na(x), 0, x)
round_2 <- function(x) round(x, 2)
states <- data.table(STATE=sort(unique(dt$STATE)))
aggregated <- dt %>% filter(YEAR >= year_min, YEAR <= year_max, EVTYPE %in% evtypes) %>%
group_by(STATE) %>%
summarise_each(funs(sum), COUNT:CROPDMG)
# We want all states to be present even if nothing happened
left_join(states,  aggregated, by = "STATE") %>%
mutate_each(funs(replace_na), FATALITIES:CROPDMG) %>%
mutate_each(funs(round_2), PROPDMG, CROPDMG)
}
runApp()
runApp()
install.packages("ISOcodes")
?rm
rm(list = ls())
runApp()
install.packages('rJava')
install.packages("rJava")
install.packages('xlsxjars')
install.packages('xlsx')
shiny::runApp()
runApp()
runApp()
runApp()
names(tags)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
head(UsStates)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(data.table)
dt <- fread('data/USStates.xlsx')
dt
# Chunk 1
library(data.table)
dt <- fread('data/USStates.xlsx')
dt
# Chunk 2
plot(cars)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(xlsx)
library(data.table)
dt <- fread('data/USStates.xlsx')
head(dt)
library(xlsx)
library(data.table)
dt <- read.xlsx('data/USStates.xlsx',header=TRUE,sheetIndex=1)
head(dt)
?fm
?rm
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
